import { NgbCalendarIslamicCivil } from './ngb-calendar-islamic-civil';
import { NgbDate } from '../ngb-date';
import { Injectable } from '@angular/core';

/**
 * Umalqura calendar is one type of Hijri calendars used in islamic countries.
 * This Calendar is used by Saudi Arabia for administrative purpose.
 * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.
 * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types
 * https://www.ummulqura.org.sa
 */

const GREGORIAN_FIRST_DATE = new Date(1900, 3, 30);
const GREGORIAN_LAST_DATE = new Date(2077, 10, 16);
const HIJRI_BEGIN = 1318;
const HIJRI_END = 1500;
const ONE_DAY = 1000 * 60 * 60 * 24;

const MONTH_LENGTH = [
  '010101110100' /*1318*/
  , '100101110110' /*1319*/
  , '010010110111' /*1320*/
  , '001001010111' /*1321*/
  , '010100101011' /*1322*/
  , '011010010101' /*1323*/
  , '011011001010' /*1324*/
  , '101011010101' /*1325*/
  , '010101011011' /*1326*/
  , '001001011101' /*1327*/
  , '100100101101' /*1328*/
  , '110010010101' /*1329*/
  , '110101001010' /*1330*/
  , '111010100101' /*1331*/
  , '011011010010' /*1332*/
  , '101011010101' /*1333*/
  , '010101011010' /*1334*/
  , '101010101011' /*1335*/
  , '010101001011' /*1336*/
  , '011010100101' /*1337*/
  , '011101010010' /*1338*/
  , '101110101001' /*1339*/
  , '001101110100' /*1340*/
  , '101010110110' /*1341*/
  , '010101010110' /*1342*/
  , '101010101010' /*1343*/
  , '110101010010' /*1344*/
  , '110110101001' /*1345*/
  , '010111010100' /*1346*/
  , '101011101010' /*1347*/
  , '010011011101' /*1348*/
  , '001001101110' /*1349*/
  , '100100101110' /*1350*/
  , '101010100110' /*1351*/
  , '110101010100' /*1352*/
  , '110110101010' /*1353*/
  , '010110110101' /*1354*/
  , '001010110110' /*1355*/
  , '100100110111' /*1356*/
  , '010010011011' /*1357*/
  , '101001001011' /*1358*/
  , '101100100101' /*1359*/
  , '101101010100' /*1360*/
  , '101101101010' /*1361*/
  , '010101101101' /*1362*/
  , '010010101101' /*1363*/
  , '101001010101' /*1364*/
  , '110100100101' /*1365*/
  , '111010010010' /*1366*/
  , '111011001001' /*1367*/
  , '011011010100' /*1368*/
  , '101011101010' /*1369*/
  , '010101101011' /*1370*/
  , '010010101011' /*1371*/
  , '011010010101' /*1372*/
  , '101101001001' /*1373*/
  , '101110100100' /*1374*/
  , '101110110010' /*1375*/
  , '010110110101' /*1376*/
  , '001010111010' /*1377*/
  , '100101011011' /*1378*/
  , '010010101011' /*1379*/
  , '010101010101' /*1380*/
  , '011010110010' /*1381*/
  , '011011011001' /*1382*/
  , '001011101100' /*1383*/
  , '100101101110' /*1384*/
  , '010010101110' /*1385*/
  , '101001010110' /*1386*/
  , '110100101010' /*1387*/
  , '110101010101' /*1388*/
  , '010110101010' /*1389*/
  , '101010110101' /*1390*/
  , '010010111011' /*1391*/
  , '001001011011' /*1392*/
  , '100100101011' /*1393*/
  , '101010010101' /*1394*/
  , '101101001010' /*1395*/
  , '101110100101' /*1396*/
  , '010110101010' /*1397*/
  , '101010110101' /*1398*/
  , '010101010110' /*1399*/
  , '101010010110' /*1400*/
  , '110101001010' /*1401*/
  , '111010100101' /*1402*/
  , '011101010010' /*1403*/
  , '011011101001' /*1404*/
  , '001101101010' /*1405*/
  , '101010101101' /*1406*/
  , '010101010101' /*1407*/
  , '101010100101' /*1408*/
  , '101101010010' /*1409*/
  , '101110101001' /*1410*/
  , '010110110100' /*1411*/
  , '100110111010' /*1412*/
  , '010011011011' /*1413*/
  , '001001011101' /*1414*/
  , '010100101101' /*1415*/
  , '101010100101' /*1416*/
  , '101011010100' /*1417*/
  , '101011101010' /*1418*/
  , '010101101101' /*1419*/
  , '010010111101' /*1420*/
  , '001000111101' /*1421*/
  , '100100011101' /*1422*/
  , '101010010101' /*1423*/
  , '101101001010' /*1424*/
  , '101101011010' /*1425*/
  , '010101101101' /*1426*/
  , '001010110110' /*1427*/
  , '100100111011' /*1428*/
  , '010010011011' /*1429*/
  , '011001010101' /*1430*/
  , '011010101001' /*1431*/
  , '011101010100' /*1432*/
  , '101101101010' /*1433*/
  , '010101101100' /*1434*/
  , '101010101101' /*1435*/
  , '010101010101' /*1436*/
  , '101100101001' /*1437*/
  , '101110010010' /*1438*/
  , '101110101001' /*1439*/
  , '010111010100' /*1440*/
  , '101011011010' /*1441*/
  , '010101011010' /*1442*/
  , '101010101011' /*1443*/
  , '010110010101' /*1444*/
  , '011101001001' /*1445*/
  , '011101100100' /*1446*/
  , '101110101010' /*1447*/
  , '010110110101' /*1448*/
  , '001010110110' /*1449*/
  , '101001010110' /*1450*/
  , '110100101010' /*1451*/
  , '111010010101' /*1452*/
  , '011100101010' /*1453*/
  , '011101010101' /*1454*/
  , '001101011010' /*1455*/
  , '100101011101' /*1456*/
  , '010010011011' /*1457*/
  , '101001001101' /*1458*/
  , '110100100110' /*1459*/
  , '110101010011' /*1460*/
  , '010110101010' /*1461*/
  , '101010101101' /*1462*/
  , '010010110110' /*1463*/
  , '101001010111' /*1464*/
  , '010100100111' /*1465*/
  , '101010010101' /*1466*/
  , '101101001010' /*1467*/
  , '101101010101' /*1468*/
  , '001101101100' /*1469*/
  , '100110101110' /*1470*/
  , '010010110110' /*1471*/
  , '101010010110' /*1472*/
  , '101101001010' /*1473*/
  , '110110100101' /*1474*/
  , '010111010010' /*1475*/
  , '010111011001' /*1476*/
  , '001011011100' /*1477*/
  , '100101101101' /*1478*/
  , '010010101101' /*1479*/
  , '011001010101' /*1480*/
  , '011011010010' /*1481*/
  , '101101101001' /*1482*/
  , '001101110100' /*1483*/
  , '100110110110' /*1484*/
  , '010011010111' /*1485*/
  , '001010101011' /*1486*/
  , '010101001011' /*1487*/
  , '011010100101' /*1488*/
  , '011101010010' /*1489*/
  , '101101101001' /*1490*/
  , '010101101011' /*1491*/
  , '001010101101' /*1492*/
  , '100101001101' /*1493*/
  , '110010010101' /*1494*/
  , '110101001010' /*1495*/
  , '111010100101' /*1496*/
  , '011011001010' /*1497*/
  , '101011010101' /*1498*/
  , '010101010110' /*1499*/
  , '110010010111' /*1500*/
];

function getDaysDiff(date1: Date, date2: Date): number {
  // Ignores the time part in date1 and date2:
  const time1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());
  const time2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());
  const diff = Math.abs(time1 - time2);
  return Math.round(diff / ONE_DAY);
}

@Injectable()
export class NgbCalendarIslamicUmalqura extends NgbCalendarIslamicCivil {
  /**
  * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.
  * `gdate` is s JS Date to be converted to Hijri.
  */
  fromGregorian(gDate: Date): NgbDate {
    let hDay = 1, hMonth = 0, hYear = 1318;
    let daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);
    if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {
      let year = 1318;
      for (let i = 0; i < MONTH_LENGTH.length; i++, year++) {
        for (let j = 0; j < 12; j++) {
          let numOfDays = +MONTH_LENGTH[i][j] + 29;
          if (daysDiff <= numOfDays) {
            hDay = daysDiff + 1;
            if (hDay > numOfDays) {
              hDay = 1;
              j++;
            }
            if (j > 11) {
              j = 0;
              year++;
            }
            hMonth = j;
            hYear = year;
            return new NgbDate(hYear, hMonth + 1, hDay);
          }
          daysDiff = daysDiff - numOfDays;
        }
      }
      return null as any;
    } else {
      return super.fromGregorian(gDate);
    }
  }
  /**
  * Converts the current Hijri date to Gregorian.
  */
  toGregorian(hDate: NgbDate): Date {
    const hYear = hDate.year;
    const hMonth = hDate.month - 1;
    const hDay = hDate.day;
    let gDate = new Date(GREGORIAN_FIRST_DATE);
    let dayDiff = hDay - 1;
    if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {
      for (let y = 0; y < hYear - HIJRI_BEGIN; y++) {
        for (let m = 0; m < 12; m++) {
          dayDiff += +MONTH_LENGTH[y][m] + 29;
        }
      }
      for (let m = 0; m < hMonth; m++) {
        dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][m] + 29;
      }
      gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);
    } else {
      gDate = super.toGregorian(hDate);
    }
    return gDate;
  }
  /**
  * Returns the number of days in a specific Hijri hMonth.
  * `hMonth` is 1 for Muharram, 2 for Safar, etc.
  * `hYear` is any Hijri hYear.
  */
  getDaysPerMonth(hMonth: number, hYear: number): number {
    if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {
      const pos = hYear - HIJRI_BEGIN;
      return +MONTH_LENGTH[pos][hMonth - 1] + 29;
    }
    return super.getDaysPerMonth(hMonth, hYear);
  }
}
